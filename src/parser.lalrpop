use std::str::FromStr;

use crate::ast::*;

grammar;


pub Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};

Factor: Box<Node> = {
    Factor FactorOp Term => Box::new(Node::Op(<>)),
    Term,
};

pub Term: Box<Node> = {
    Num => Box::new(Node::Number(<>)),
    Id => Box::new(Node::ID(<>)),
    "(" <BoolExp> ")",
    FunctionCall,
    UnaryOp Term => Box::new(Node::UnaryOp(<>)),
    "true" => Box::new(Node::Boolean(true)),
    "false" => Box::new(Node::Boolean(false)),
};

pub Id: String = {
    r"([a-z]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*" => String::from_str(<>).unwrap(),
};


Op: char = {
    r"[+]|[-]" => char::from_str(<>).unwrap(),
};

pub Expr: Box<Node> = {
    Expr ExprOp Factor => Box::new(Node::Op(<>)),
    Factor,
};

pub ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Mod,
};

pub Comparison: Box<Node> = {
    Comparison CompareOp Expr => Box::new(Node::Op(<>)),
    Expr,
};

pub BoolExp: Box<Node> = {
    BoolExp BooleanOp Comparison => Box::new(Node::Op(<>)),
    Comparison,
};



CompareOp: Opcode = {
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "<=" => Opcode::LessOrEq,
    ">=" => Opcode::GreaterorEq,
    "==" => Opcode::Equals,
    "!=" => Opcode::Neq,
};

BooleanOp: Opcode = {
    "&&" => Opcode::And,
    "||" => Opcode::Or,
};

UnaryOp: Opcode = {
    "!" => Opcode::Not,
    "-" => Opcode::UnarySub,
    "&" => Opcode::Ref,
    "*" => Opcode::DeRef,
    "&mut" => Opcode::MutRef,
};

pub Stmt: Box<Node> = {
    <name:Id> "=" <value:Instruction> => Box::new(Node::Assign(name, value)),
};

pub Declaration: Box<Node> = {
    "let" "mut" <name:Id> <t:TypeSpec?> <v:("=" <Instruction>)?> => Box::new(Node::Declaration(name, true, t, v)),
    "let" <name:Id> <t:TypeSpec?> <v:("=" <Instruction>)?> => Box::new(Node::Declaration(name, false, t, v)),
};

pub WriteByReference: Box<Node> = {
    <op:UnaryOp> <name:Id> "=" <value:Instruction> => Box::new(Node::WriteByRef(op, name, value)),
}

Comma<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e { 
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SemiColon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e { 
        None => v,
        Some(e) => {
            let mut v = v;
            //If the final statement in a block does not have a semicolon this will be the value of the block
            v.push(Box::new(Node::BlockValue(e)));
            v
        }
    }

};

pub Program: Box<Node> = {
    Funcs => Box::new(Node::Program(<>)),
};

SepFunctions<T>: Vec<T> = {
    <v:("fn" <T> )*> => v,
};

pub FunctionCall: Box<Node> = {
    <name:Id> "(" <args:Arguments> ")" => Box::new(Node::Call(name, args)),
};

pub If: Box<Node> = {
    "if" <cond:BoolExp> "{" <body:Body> "}" => Box::new(Node::IfStmt(cond, body)),
};

pub IfElse: Box<Node> = {
    "if" <cond:BoolExp> "{" <body:Body> "}" "else" "{" <ebody:Body> "}" => Box::new(Node::IfElse(cond, body, ebody)),
};

pub While: Box<Node> = {
    "while" <cond:BoolExp> "{" <body:Body>  "}" => Box::new(Node::While(cond, body)),
};

Instruction: Box<Node> = {
    BoolExp,
    Declaration,
    Stmt,
    If,
    IfElse,
    While,
    Return,
    WriteByReference,
};

pub TypeSpec: String = {
    ": i32" => String::from_str(<>).unwrap(),
    ": bool" => String::from_str(<>).unwrap(),
    ": &i32" => String::from_str(<>).unwrap(),
    ": &bool" => String::from_str(<>).unwrap(),
    ": &mut i32" => String::from_str(<>).unwrap(),
    ": &mut bool" => String::from_str(<>).unwrap(),
};

pub Function: Box<Node> = {
    <funcname:Id> "(" <p:Params> ")" <t:("->" <Id>)?> "{" <body:Body> "}" =>
    Box::new(Node::FnDef(funcname, p, t, body)),

};

pub Return: Box<Node> = {
    "return" <ret:BoolExp?> => Box::new(Node::Return(ret)),
};

ParamDef: Box<Node> = {
    <name:Id> <t:TypeSpec> => Box::new(Node::ParamDef(name, t)),
};

Params = Comma<ParamDef>;

Arguments = Comma<BoolExp>;

Body = SemiColon<Instruction>;

Funcs = SepFunctions<Function>;